#include <iostream>
#include <filesystem>
#include <chrono>
#include "main.h"

static int64_t to_unix_timestamp(std::filesystem::file_time_type ftime) { //this func is generated by gpt5
    // file_time_type may not use system_clock, so convert
    auto sctp = std::chrono::time_point_cast<std::chrono::system_clock::duration>(
        ftime - std::filesystem::file_time_type::clock::now()
        + std::chrono::system_clock::now()
    );
    return std::chrono::duration_cast<std::chrono::seconds>(
        sctp.time_since_epoch()
    ).count();
}
static std::filesystem::file_time_type from_unix_timestamp(int64_t unix_time) {//this func is generated by gpt5
    using namespace std::chrono;

    // Step 1: make a system_clock::time_point from unix timestamp
    auto tp = system_clock::time_point{seconds(unix_time)};

    // Step 2: translate to file_time_type's clock
    auto ftp = std::chrono::time_point_cast<std::filesystem::file_time_type::duration>(
        tp - system_clock::now() + std::filesystem::file_time_type::clock::now()
    );

    return ftp;
}


static const auto p1=std::chrono::system_clock::now();
int64_t current_time=std::chrono::duration_cast<std::chrono::seconds>(p1.time_since_epoch()).count();

bool is_in_cache() {
    std::filesystem::directory_entry entry{decompressed_dir_name};
    if (entry.exists()) {
        spdlog::info("cache system: Hit!");
        return true;
    }
    spdlog::info("cache system: Miss!");
    return false;
}

void cache_timestamp_upd() {
    std::filesystem::last_write_time(decompressed_dir_name,from_unix_timestamp(current_time));
    spdlog::info("cache system: Cache file expire date extended!!");
}

void check_cache() {
    std::filesystem::directory_entry entry{"cache"};
    if (entry.exists()) {
        for (auto const& dirs : std::filesystem::directory_iterator{"cache"}) {
            int64_t entry_last_write_time = to_unix_timestamp(std::filesystem::last_write_time(dirs));
            if ((current_time - entry_last_write_time) > CACHE_EXPIRE_TIME_IN_SECONDS) {
                std::remove(dirs.path().c_str());
                spdlog::info("cache system: Expired dir removed!");
            }
        }
    }
}
void call_cache_clean() {
    while (true) {
        check_cache();
        std::this_thread::sleep_for(std::chrono::seconds(CACHE_CHECK_DURAION_IN_SECONDS));
    }
}